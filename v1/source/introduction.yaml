swagger: '2.0'
info:
  version: 1.0.0
  title: Reach API Reference
  description: Reach API Specification cover all microservices and microapps endpoints.
  contact:
    email: dev@rea.ch
  x-logo:
    url: "http://api-docs.rea.ch/static/rea.ch-logo-black.png"
    backgroundColor: "#fafafa"
basePath: /v1/
host: api.rea.ch
tags:
  - name: introduction
    description: |
      The Reach Web API allows components and clients to interact with the reach ecosystem.
  - name: basics
    description: |
      All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix.
      The response contains a JSON object, which will always contain a top-level boolean property
      `ok`, indicating success or failure. For failure results, the `error` property will contain a
      short machine-readable error code.

      ```json
      {
        "ok": true,
        "stuff": "This is good"
      }
      ```
      ```json
      {
        "ok": false,
        "error": "something_bad"
      }
      ```
  - name: authentication
    description: |
      The majority of the Reach API require authentication as a user.

      Make an HTTP POST to `api.rea.ch/v1/auth/login` with a JSON body indicating the
      userâ€™s `email` and `password`.

      ```
      curl -i -d '{"email":"someone@nowhere.com","password":"thisisabadpassword"}' https://api.rea.ch/v1/auth/login
      ```

      If successful, the response will contain a `JWT Access token` and a `JWT Refresh token`.

      ```
      HTTP/1.1 200 OK
      Date: Fri, 11 Sep 2015 13:21:14 GMT
      Content-Length: 657
      Content-Type: application/json; charset=utf-8

      {
        "ok": true,
        "tokens": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIn0.jfk27TWEdnHx6kCZwzvX5ZhdAf9uDFmQHZopoh2h4kU",
          "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIxMjM0NTY3ODkwIn0.dJltAPWAQ36LQsS2ottsKpZ4Pxadykvg04Ys-34bDbo"
        }
      }
      ```

      Include the `JWT Access token` as part of the `Authorization` header on your future API requests with the `Bearer` method.

      ```
      curl -i -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6...' https://api.rea.ch/v1/account/user/me
      ```

      You should now be able to access the API as the user you logged in as.

      Additional information on JWT Tokens can be found here: https://jwt.io/introduction/

  - name: websocket
    description: |
      In addition to the HTTP RESTful API, Reach also offers a Real-Time API
      based on WebSocket that allows our clients (mobile and web based) to send messages
      and receives events from reach backend in real-time.

      To connect to the WebSocket, clients follow the standard opening handshake as [defined by the RFC specification](https://tools.ietf.org/html/rfc6455#section-1.3) to the `websocket.rea.ch` endpoint of Reach.

      #### Authentication

      The client authenticated itself with the WebSocket using the same JWT Token as it would use in RESTful requests.

      To authenticate, the client pass the JWT token in the WebSocket URI when connecting.

      Once successfully authenticated, the server will pass a `hello` WebSocket event over the connection.

      ```json
      {
        "type": "hello"
      }
      ```

      #### Events

      WebSocket events are primarily used to alert the client to changes in reach, such as delivering new messages, passing new inbox events or alerting the client that another user is typing in a conversation.

      Events on the WebSocket will have the form:

      ```json
      {
        "type": "message",
        "data": {
          "sid": "1355517523.000005",
          "date_created": "2017-06-21T13:03:32Z",
          "from": "U228389023",
          "to": "C9375920278",
          "body": "Hello World!"
        }
      }
      ```

      #### WebSocket API

      Clients can send a message to reach by sending JSON over the websocket connection.

      Every message sent should have a unique positive integer ID. All replies to that message
      will include this ID allowing the client to correlate responses with the messages sent;
      replies may be "out of order" due to the asynchronous nature of the message servers.

      Also, as with events sent from the server, each event sent by the client has a string
      type specifying what the message does. Chat messages are of type message.

      So to post a message:

      ```json
      {
        "id": 1,
        "type": "message",
        "data": {
          "to": "C9375920278",
          "body": "John, John, I am a message!"
        }
      }
      ```

      Once the JSON has been sent to the server, clients should immediately display the text in the conversation,
      knowing it is pending. At some point after that the server will send a confirmation that the message was received:

      ```json
      {
        "ok": true,
        "reply_to": 1,
        "type": "message",
        "data": {
          "sid": "1482960137.003543",
          "date_created": "2017-06-21T13:03:32Z",
          "from": "U228389023",
          "to": "C9375920278",
          "body": "John, John, I am a message!"
        }
      }
      ```

      In the case of an error, the response would be:

      ```json
      {
        "ok": false,
        "reply_to": 1,
        "error": "no_text"
      }
      ```

  - name: 1. events
    description: |
      The inbox service provide an interface to retrieve Inbox events.

      Inbox events are comprised of notification events, conversation events, and subject events.

      Inbox are unique per user, backend returns user's inbox events based on the JWT token.

  - name: 2. events
    description: |
      The subject service provide an interface to retrieve Subject events.

      Subject events are unique per user, backend returns user's subject events based on the JWT token.
  - name: 2. subjects
    description: |
      The Subject resource.
  - name: 2. users
    description: |
      The User resource of Subject represents a unique identity interacting with the service.
  - name: 2. conversations
    description: |
      The Conversation resource of Subject represents a unique identity interacting with the service.

  - name: 3. conversations
    description: |
      The Conversation resource of Chat represents a "chat room" - a scope in which
      Messages can be sent and received. Users can be added or invited to join conversations.
  - name: 3. messages
    description: |
      The Message resource of Chat represents a single message within a Conversation.

      Posting to the Messages resource of a Conversation allows you to send messages to the Conversation via the REST API on behalf of a user.
  - name: 3. users
    description: |
      The User resource of Chat represents a unique identity interacting with the service.
  - name: 3. subjects
    description: |
      The Subject resource.

  - name: 4. bindings
    description: |
      The Binding resource binds a User to its Address. Addresses are different per channel.
      For instance, for iOS push notifications the address is an APNS device token.
      Creating a Binding for an Identity and Address allows to send notifications to an
      identity rather than a specific device.

  - name: 5. authentication
    description: |
      In authentication, when the user successfully logs in using their credentials,
      a JSON Web Token will be returned and must be saved locally, instead of the
      traditional approach of creating a session in the server and returning a cookie.

      Whenever the user wants to access a protected route or resource, the user agent
      should send the JWT, typically in the Authorization header using the Bearer schema.
      The content of the header should look like the following.

      ```
      Authorization: Bearer [token]
      ```

      This is a stateless authentication mechanism as the user state is never saved
      in server memory. The server's protected routes will check for a valid JWT in
      the Authorization header, and if it's present, the user will be allowed to access
      protected resources. As JWTs are self-contained, all the necessary information
      is there, reducing the need to query the database multiple times.

  - name: 6. users
    description: |
      Identity and access management for the User resource.
  - name: 6. conversations
    description: |
      Identity and access management for the Conversation resource.
  - name: 6. subjects
    description: |
      Identity and access management for the Subject resource.

  - name: 7. users
    description: |
      Endpoints for creating, getting and interacting with users.

      When using endpoints that require a user `sid`, the string `me` can be used in place of the user `sid` to indicate the action is to be taken for the logged in user.
  - name: 7. personas
    description: |
      The Persona resource.
x-tagGroups:
  - name: Introduction
    tags:
      - introduction
  - name: Standard Features
    tags:
      - basics
      - authentication
      - websocket
  - name: 1. Inbox Service
    tags:
      - 1. events
  - name: 2. Subject Service
    tags:
      - 2. events
      - 2. subjects
      - 2. users
      - 2. conversations
  - name: 3. Chat Service
    tags:
      - 3. conversations
      - 3. messages
      - 3. users
      - 3. subjects
  - name: 4. Notify Service
    tags:
      - 4. notifications
      - 4. bindings
  - name: 5. Auth Service
    tags:
      - 5. authentication
  - name: 6. IAM Service
    tags:
      - 6. users
      - 6. conversations
      - 6. subjects
  - name: 7. Account Service
    tags:
      - 7. users
      - 7. personas
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: []
consumes:
  - application/json
produces:
  - application/json
responses:
  'Forbidden':
    description: Do not have appropriate permissions
    schema:
      $ref: '#/definitions/AppError'
  'Unauthorized':
    description: No access token provided
    schema:
      $ref: '#/definitions/AppError'
  'BadRequest':
    description: Invalid or missing parameters in URL or request body
    schema:
      $ref: '#/definitions/AppError'
  'NotFound':
    description: Resource not found
    schema:
      $ref: '#/definitions/AppError'
parameters:
  page:
    name: page
    in: query
    description: The page to select.
    default: 0
    type: integer
  page_size:
    name: page_size
    in: query
    description: The number of messages per page.
    default: 50
    type: integer
paths:
