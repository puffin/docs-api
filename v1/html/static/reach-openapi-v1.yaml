swagger: '2.0'
info:
  version: 1.0.0
  title: Reach API Reference
  description: Reach API Specification cover all microservices and microapps endpoints.
  contact:
    email: dev@rea.ch
  x-logo:
    url: "http://api-docs.rea.ch/static/rea.ch-logo-black.png"
    backgroundColor: "#fafafa"
basePath: /v1/
host: api.rea.ch
tags:
  - name: introduction
    description: |
      The Reach Web API allows components and clients to interact with the reach ecosystem.
  - name: basics
    description: |
      All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix.
      The response contains a JSON object, which will always contain a top-level boolean property
      `ok`, indicating success or failure. For failure results, the `error` property will contain a
      short machine-readable error code.

      ```json
      {
        "ok": true,
        "stuff": "This is good"
      }
      ```
      ```json
      {
        "ok": false,
        "error": "something_bad"
      }
      ```
  - name: authentication
    description: |
      The majority of the Reach API require authentication as a user.

      Make an HTTP POST to `api.rea.ch/v1/auth/login` with a JSON body indicating the
      userâ€™s `email` and `password`.

      ```
      curl -i -d '{"email":"someone@nowhere.com","password":"thisisabadpassword"}' https://api.rea.ch/v1/auth/login
      ```

      If successful, the response will contain a `JWT Access token` and a `JWT Refresh token`.

      ```
      HTTP/1.1 200 OK
      Date: Fri, 11 Sep 2015 13:21:14 GMT
      Content-Length: 657
      Content-Type: application/json; charset=utf-8

      {
        "ok": true,
        "tokens": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIn0.jfk27TWEdnHx6kCZwzvX5ZhdAf9uDFmQHZopoh2h4kU",
          "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIxMjM0NTY3ODkwIn0.dJltAPWAQ36LQsS2ottsKpZ4Pxadykvg04Ys-34bDbo"
        }
      }
      ```

      Include the `JWT Access token` as part of the `Authorization` header on your future API requests with the `Bearer` method.

      ```
      curl -i -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6...' https://api.rea.ch/v1/account/user/me
      ```

      You should now be able to access the API as the user you logged in as.

      Additional information on JWT Tokens can be found here: https://jwt.io/introduction/

  - name: websocket
    description: |
      In addition to the HTTP RESTful API, Reach also offers a Real-Time API
      based on WebSocket that allows our clients (mobile and web based) to send messages
      and receives events from reach backend in real-time.

      To connect to the WebSocket, clients follow the standard opening handshake as [defined by the RFC specification](https://tools.ietf.org/html/rfc6455#section-1.3) to the `websocket.rea.ch` endpoint of Reach.

      #### Authentication

      The client authenticated itself with the WebSocket using the same JWT Token as it would use in RESTful requests.

      To authenticate, the client pass the JWT token in the WebSocket URI when connecting.

      Once successfully authenticated, the server will pass a `hello` WebSocket event over the connection.

      ```json
      {
        "type": "hello"
      }
      ```

      #### Events

      WebSocket events are primarily used to alert the client to changes in reach, such as delivering new messages, passing new inbox events or alerting the client that another user is typing in a conversation.

      Events on the WebSocket will have the form:

      ```json
      {
        "type": "message",
        "data": {
          "sid": "1355517523.000005",
          "date_created": "2017-06-21T13:03:32Z",
          "from": "U228389023",
          "to": "C9375920278",
          "body": "Hello World!"
        }
      }
      ```

      #### WebSocket API

      Clients can send a message to reach by sending JSON over the websocket connection.

      Every message sent should have a unique positive integer ID. All replies to that message
      will include this ID allowing the client to correlate responses with the messages sent;
      replies may be "out of order" due to the asynchronous nature of the message servers.

      Also, as with events sent from the server, each event sent by the client has a string
      type specifying what the message does. Chat messages are of type message.

      So to post a message:

      ```json
      {
        "id": 1,
        "type": "message",
        "data": {
          "to": "C9375920278",
          "body": "John, John, I am a message!"
        }
      }
      ```

      Once the JSON has been sent to the server, clients should immediately display the text in the conversation,
      knowing it is pending. At some point after that the server will send a confirmation that the message was received:

      ```json
      {
        "ok": true,
        "reply_to": 1,
        "type": "message",
        "data": {
          "sid": "1482960137.003543",
          "date_created": "2017-06-21T13:03:32Z",
          "from": "U228389023",
          "to": "C9375920278",
          "body": "John, John, I am a message!"
        }
      }
      ```

      In the case of an error, the response would be:

      ```json
      {
        "ok": false,
        "reply_to": 1,
        "error": "no_text"
      }
      ```

  - name: 1. events
    description: |
      The inbox service provide an interface to retrieve Inbox events.

      Inbox events are comprised of notification events, conversation events, and subject events.

      Inbox are unique per user, backend returns user's inbox events based on the JWT token.

  - name: 2. events
    description: |
      The subject service provide an interface to retrieve Subject events.

      Subject events are unique per user, backend returns user's subject events based on the JWT token.
  - name: 2. subjects
    description: |
      The Subject resource.
  - name: 2. users
    description: |
      The User resource of Subject represents a unique identity interacting with the service.
  - name: 2. conversations
    description: |
      The Conversation resource of Subject represents a unique identity interacting with the service.

  - name: 3. conversations
    description: |
      The Conversation resource of Chat represents a "chat room" - a scope in which
      Messages can be sent and received. Users can be added or invited to join conversations.
  - name: 3. messages
    description: |
      The Message resource of Chat represents a single message within a Conversation.

      Posting to the Messages resource of a Conversation allows you to send messages to the Conversation via the REST API on behalf of a user.
  - name: 3. users
    description: |
      The User resource of Chat represents a unique identity interacting with the service.
  - name: 3. subjects
    description: |
      The Subject resource.

  - name: 4. bindings
    description: |
      The Binding resource binds a User to its Address. Addresses are different per channel.
      For instance, for iOS push notifications the address is an APNS device token.
      Creating a Binding for an Identity and Address allows to send notifications to an
      identity rather than a specific device.

  - name: 5. authentication
    description: |
      In authentication, when the user successfully logs in using their credentials,
      a JSON Web Token will be returned and must be saved locally, instead of the
      traditional approach of creating a session in the server and returning a cookie.

      Whenever the user wants to access a protected route or resource, the user agent
      should send the JWT, typically in the Authorization header using the Bearer schema.
      The content of the header should look like the following.

      ```
      Authorization: Bearer [token]
      ```

      This is a stateless authentication mechanism as the user state is never saved
      in server memory. The server's protected routes will check for a valid JWT in
      the Authorization header, and if it's present, the user will be allowed to access
      protected resources. As JWTs are self-contained, all the necessary information
      is there, reducing the need to query the database multiple times.

  - name: 6. users
    description: |
      Identity and access management for the User resource.
  - name: 6. conversations
    description: |
      Identity and access management for the Conversation resource.
  - name: 6. subjects
    description: |
      Identity and access management for the Subject resource.

  - name: 7. users
    description: |
      Endpoints for creating, getting and interacting with users.

      When using endpoints that require a user `sid`, the string `me` can be used in place of the user `sid` to indicate the action is to be taken for the logged in user.
  - name: 7. personas
    description: |
      The Persona resource.
x-tagGroups:
  - name: Introduction
    tags:
      - introduction
  - name: Standard Features
    tags:
      - basics
      - authentication
      - websocket
  - name: 1. Inbox Service
    tags:
      - 1. events
  - name: 2. Subject Service
    tags:
      - 2. events
      - 2. subjects
      - 2. users
      - 2. conversations
  - name: 3. Chat Service
    tags:
      - 3. conversations
      - 3. messages
      - 3. users
      - 3. subjects
  - name: 4. Notify Service
    tags:
      - 4. notifications
      - 4. bindings
  - name: 5. Auth Service
    tags:
      - 5. authentication
  - name: 6. IAM Service
    tags:
      - 6. users
      - 6. conversations
      - 6. subjects
  - name: 7. Account Service
    tags:
      - 7. users
      - 7. personas
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: []
consumes:
  - application/json
produces:
  - application/json
responses:
  'Forbidden':
    description: Do not have appropriate permissions
    schema:
      $ref: '#/definitions/AppError'
  'Unauthorized':
    description: No access token provided
    schema:
      $ref: '#/definitions/AppError'
  'BadRequest':
    description: Invalid or missing parameters in URL or request body
    schema:
      $ref: '#/definitions/AppError'
  'NotFound':
    description: Resource not found
    schema:
      $ref: '#/definitions/AppError'
parameters:
  page:
    name: page
    in: query
    description: The page to select.
    default: 1
    type: integer
  page_size:
    name: page_size
    in: query
    description: The number of resource per page.
    default: 50
    type: integer
  inclusive:
    name: inclusive
    in: query
    description: Include resource with latest or oldest in results.
    default: true
    type: boolean
  latest:
    name: latest
    in: query
    description: SID of the end range of resources to include in results.
    default: null
    type: string
  oldest:
    name: oldest
    in: query
    description: SID of the start range of resources to include in results.
    default: null
    type: string
paths:
  /chat/conversations:
    post:
      tags:
        - 3. conversations
      summary: Create a conversation
      description: |
        Create a new conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |

      parameters:
        - name: conversation
          in: body
          description: The conversation to create.
          schema:
            $ref: '#/definitions/Chat-ConversationObject'
      responses:
        '201':
          description: Conversation creation successful
          schema:
            $ref: '#/definitions/Chat-Conversation'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /chat/conversations/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string

    get:
      tags:
        - 3. conversations
      summary: Get a conversation
      description: |
        Get a single conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Conversation retrieval successful
          schema:
            $ref: '#/definitions/Chat-Conversation'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - 3. conversations
      summary: Update a conversation
      description: |
        Update a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_conversation` | Authenticated user does not have permission to update this conversation. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: conversation
          in: body
          description: The conversation to update.
          schema:
            type: object
            properties:
              title:
                description: The conversation title.
                type: string
              objective:
                description: The conversation objective.
                type: string
              private:
                description: Conversation is private?
                type: boolean
                default: true
                enum:
                  - private
                  - public
              attributes:
                description: |
                  An optional string metadata field that can be use to store any data you wish.
                  The string value must contain structurally valid JSON if specified.
                  Note that this will always be null for resources returned via LIST GET operations,
                  but will be present for single GET.
                type: string
      responses:
        '200':
          description: Conversation update successful
          schema:
            $ref: '#/definitions/Chat-Conversation'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/archive:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 3. conversations
      summary: Archive a conversation
      description: |
        Archive a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `already_archived` | Conversation has already been archived. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Conversation archive successful
          schema:
            $ref: '#/definitions/AppOk'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/unarchive:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 3. conversations
      summary: Unarchive a conversation
      description: |
        Unarchive a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_archived` | Conversation is not archived. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Conversation unarchive successful
          schema:
            $ref: '#/definitions/AppOk'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/invite:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 3. conversations
      summary: Add user to conversation
      description: |
        Invite a user to a conversation.

        Valid user roles are `admin`, `member` or `guest`.

        #### Permissions
        Must have the `admin` role on the conversation to invite users to conversation with a specific
        role.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `user_not_found` | Value passed for `user` was invalid. | 404 |
        | `cant_invite_self` | Authenticated user cannot invite themselves to a conversation. | 403 |
        | `not_in_conversation` | Authenticated user is not in the conversation. | 403 |
        | `already_in_conversation` | Invited user is already in the conversation. | 403 |
        | `is_archived` | Conversation has been archived. | 403 |
        | `cant_invite` | User cannot be invited to this conversation. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              user_sid:
                description: The user unique identifier.
                type: string
              role:
                description: The user role for this conversation.
                type: string
                default: member
                enum:
                  - admin
                  - member
                  - guest
      responses:
        '200':
          description: Conversation member creation successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/kick:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    delete:
      tags:
        - 3. conversations
      summary: Remove user from conversation
      description: |
        Remove a user from a conversation.

        #### Permissions
        Must have the `admin` role on the conversation to remove users from conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `user_not_found` | Value passed for `user` was invalid. | 404 |
        | `cant_kick_self` | Authenticated user cannot kick themselves from a conversation. | 403 |
        | `not_in_conversation` | User is not in the conversation. | 403 |
        | `is_archived` | Conversation has been archived. | 403 |
        | `cant_kick` | Authenticated user can't kick User from this conversation. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              user_sid:
                description: The user unique identifier.
                type: string
      responses:
        '200':
          description: Conversation member deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/join:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 3. conversations
      summary: Join a conversation
      description: |
        User join a conversation with a persona.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `persona_not_found` | Value passed for `persona` was invalid. | 404 |
        | `already_in_conversation` | User is already in the conversation with a persona. | 403 |
        | `not_in_conversation` | User is not in the conversation. | 403 |
        | `is_archived` | Conversation has been archived. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              persona_sid:
                description: The persona unique identifier.
                type: string
      responses:
        '200':
          description: Conversation persona join successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/decline-invite:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 3. conversations
      summary: Decline a conversation invite
      description: |
        User decline a conversation invitation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_in_conversation` | User is not in the conversation. | 403 |
        | `is_archived` | Conversation has been archived. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Conversation decline invite successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/conversations/{sid}/leave:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    delete:
      tags:
        - 3. conversations
      summary: Leave a conversation
      description: |
        User leave a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_in_conversation` | User is not in the conversation. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Conversation persona leave successful
          schema:
            $ref: '#/definitions/AppOk'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /chat/conversations/{sid}/messages:
    parameters:
      - name: sid
        in: path
        description: The conversation ID to get the messages for.
        required: true
        type: string
    get:
      tags:
        - 3. messages
      summary: Get messages for a conversation
      description: |
        Get a list of messages in a conversation. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_latest` | Value passed for `latest` was invalid | 400 |
        | `invalid_oldest` | Value passed for `oldest` was invalid | 400 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/inclusive"
        - $ref: "#/parameters/latest"
        - $ref: "#/parameters/oldest"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Message list retrieval successful
          schema:
            $ref: '#/definitions/Chat-Messages'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/messages/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this message.
        required: true
        type: string

    get:
      tags:
        - 3. messages
      summary: Get a message
      description: |
        Get a single message.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `message_not_found` | Value passed for `sid` was invalid. |  404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Message retrieval successful
          schema:
            $ref: '#/definitions/Chat-Message'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - 3. messages
      summary: Update a message
      description: |
        Update a message.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `message_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_message` | Authenticated user does not have permission to update this message. | 403 |
        | `msg_too_long` | Message body is too long. | 400 |
        | `no_text` | No message text provided. | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: message
          in: body
          description: The message to update.
          schema:
            type: object
            properties:
              unfurl_links:
                description: Pass `true` to enable unfurling of text-based content.
                type: boolean
                default: false
              unfurl_media:
                description: Pass `false` to disable unfurling of media content.
                type: boolean
                default: true
              attributes:
                description: |
                  An optional string metadata field that can be use to store any data you wish.
                  The string value must contain structurally valid JSON if specified.
                  Note that this will always be null for resources returned via LIST GET operations,
                  but will be present for single GET.
                type: string
              body:
                description: The content of the message.
                type: string
              thread_sid:
                description: Provide another message's sid value to make this message a reply.
                type: string
      responses:
        '200':
          description: Message update successful
          schema:
            $ref: '#/definitions/Chat-Message'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 3. messages
      summary: Delete a message
      description: |
        Delete a message.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `message_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_delete_message` | Authenticated user does not have permission to delete this message. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Message deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/messages/{sid}/thread:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this message.
        required: true
        type: string

    get:
      tags:
        - 3. messages
      summary: Get a thread
      description: |
        Get a list of messages in a thread. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `message_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Message list retrieval successful
          schema:
            $ref: '#/definitions/Chat-Messages'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /chat/conversations/{sid}/users:
    parameters:
      - name: sid
        in: path
        description: The conversation ID to get the users for.
        required: true
        type: string
    get:
      tags:
        - 3. users
      summary: Get users for a conversation
      description: |
        Get a list of users in a conversation. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: User list retrieval successful
          schema:
            $ref: '#/definitions/Chat-Users'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /chat/users/{sid}/conversations:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this user.
        required: true
        type: string
    get:
      tags:
        - 3. users
      summary: Get conversations for user
      description: |
        Get all the conversations for a user.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_sort` | Value passed for `sort` was invalid | 400 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: sort
          in: query
          description: Represents the sort operation to be applied when working with the result sets.
          type: string
          default: latest-message
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Conversation list retrieval successful
          schema:
            $ref: '#/definitions/Chat-Conversations'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /chat/conversations/{sid}/subjects:
    parameters:
      - name: sid
        in: path
        description: The conversation ID to get the users for.
        required: true
        type: string
    get:
      tags:
        - 3. subjects
      summary: Get subjects for a conversation
      description: |
        Get a list of subjects in a conversation. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Subject list retrieval successful
          schema:
            $ref: '#/definitions/Chat-Subjects'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /subject/{sid}/events:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string

    get:
      tags:
        - 2. events
      summary: Get events for a subject
      description: |
        Get a list of events for a subject.  Use the query parameters to modify the behaviour of this endpoint.

        #### Common Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this event. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `date_updated` | The datetime (ISO 8601) that this resource was updated. |
        | `ts` | The timestamp that this resource was last changed. |
        | `subject_sid` | The subject ID associated with this event. |
        | `user_sid` | The user ID associated with this event. |
        | `notification` or `message` | Associated resource. |
        | `social_detail` | Associated social details resource if any. |

        #### Social details resource

        Additional social details associated with the events.

        ##### Social details Properties

        | Name | Description |
        | - | - |
        | `title` | The title of the social details. |

        #### Event associated resource

        An event associated resource can be a `notification` or `message`.

        ##### Notification Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this notification. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `ts` | The timestamp that this resource was last changed. |
        | `title` | The title of the notification. |
        | `subject` or `conversation` | The content object of the notification. |

        ##### Response sample

        ```json
        {
          "sid": "234734213.56765867",
          "date_created": "2017-06-14T17:04:36Z",
          "ts": 1360782804,
          "user_sid": "U228389023",
          "subject_sid": "S44546566",
          "notification": {
            "sid": "238077.0785345",
            "date_created": "2017-06-14T17:04:36Z",
            "ts": 1360782804,
            "title": "Maria joined a conversation",
            "conversation": {
              "sid": "C234253394",
              "ts": 1360782804,
              "title": "Evaluate IR Camera 32B",
              "objective": "Hello World!",
              "participant_count": 0,
              "subject_count": 0
            }
          }
        }
        ```

        ##### Message Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this message. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `ts` | The timestamp that this resource was last changed. |
        | `body` | The content of the message. |
        | `from` | Identity of the messageâ€™s author. |
        | `to` | The conversation resource. |
        | `participant_count` | Number of participants of this convrsation. |
        | `subject_count` | Number of subjects of this convrsation. |

        ##### Response sample

        ```json
        {
          "sid": "234734213.56765867",
          "date_created": "2017-06-14T17:04:36Z",
          "ts": 1360782804,
          "user_sid": "U228389023",
          "subject_sid": "S44546566",
          "message": {
            "sid": "238077.0785345",
            "date_created": "2017-06-14T17:04:36Z",
            "ts": 1360782804,
            "body": "Why is the jump to production so difficult?",
            "from": {
              "sid": "U228389023",
              "ts": 1360782804,
              "first_name": "Bob",
              "last_name": "Sinclair",
              "avatar": "http://api-docs.rea.ch/static/rea.ch-logo-black.png",
              "persona": {
                "sid": "P928472829",
                "ts": 1360782804,
                "name": "work"
              }
            },
            "to": {
              "sid": "C9375920278",
              "ts": 1360782804,
              "title": "Evaluate IR Camera 32B",
              "objective": "Hello World!"
            },
            "participant_count": 0,
            "subject_count": 0
          },
          "social_detail": {
            "title": "<@U024BE7LH|Mark> and 3 more participate"
          }
        }
        ```

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_latest` | Value passed for `latest` was invalid | 400 |
        | `invalid_oldest` | Value passed for `oldest` was invalid | 400 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
      parameters:
        - $ref: "#/parameters/inclusive"
        - $ref: "#/parameters/latest"
        - $ref: "#/parameters/oldest"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Event list retrieval successful
          schema:
            $ref: '#/definitions/Subject-Events'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /subject/subjects:
    post:
      tags:
        - 2. subjects
      summary: Create a subject
      description: |
        Create a new subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |

      parameters:
        - name: subject
          in: body
          description: The subject to create.
          schema:
            $ref: '#/definitions/Subject-SubjectObject'
      responses:
        '201':
          description: Subject creation successful
          schema:
            $ref: '#/definitions/Subject-Subject'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /subject/subjects/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string

    get:
      tags:
        - 2. subjects
      summary: Get a subject
      description: |
        Get a single subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Subject retrieval successful
          schema:
            $ref: '#/definitions/Subject-Subject'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - 2. subjects
      summary: Update a subject
      description: |
        Update a subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_subject` | Authenticated user does not have permission to update this subject. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: subject
          in: body
          description: The subject to update.
          schema:
            type: object
            properties:
              name:
                description: The subject name.
                type: string
              description:
                description: The subject description.
                type: string
              attributes:
                description: |
                  An optional string metadata field that can be use to store any data you wish.
                  The string value must contain structurally valid JSON if specified.
                  Note that this will always be null for resources returned via LIST GET operations,
                  but will be present for single GET.
                type: string
      responses:
        '200':
          description: Subject update successful
          schema:
            $ref: '#/definitions/Subject-Subject'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/cover:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string

    get:
      tags:
        - 2. subjects
      summary: Get a subject cover
      description: |
        Get a subject cover.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Subject cover retrieval successful
          schema:
            $ref: '#/definitions/Subject-SubjectCover'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/invite:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string
    post:
      tags:
        - 2. subjects
      summary: Add user to subject
      description: |
        Invite a user to a subject.

        Valid user roles are `admin` or `member`.

        #### Permissions
        Must have the `admin` role on the subject to invite users to subject with a specific
        role.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `user_not_found` | Value passed for `user_sid` was invalid. | 404 |
        | `cant_invite_self` | Authenticated user cannot invite themselves to a subject. | 403 |
        | `not_in_subject` | Authenticated user is not in the subject. | 403 |
        | `already_in_subject` | Invited user is already in the subject. | 403 |
        | `cant_invite` | User cannot be invited to this subject. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              user_sid:
                description: The user unique identifier.
                type: string
              role:
                description: The user role for this subject.
                type: string
                default: member
                enum:
                  - admin
                  - member
      responses:
        '200':
          description: Subject member creation successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/kick:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string
    delete:
      tags:
        - 2. subjects
      summary: Remove user from subject
      description: |
        Remove a user from a subject.

        #### Permissions
        Must have the `admin` role on the subject to remove users from subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `user_not_found` | Value passed for `user_sid` was invalid. | 404 |
        | `cant_kick_self` | Authenticated user cannot kick themselves from a subject. | 403 |
        | `not_in_subject` | Authenticated user is not in the subject. | 403 |
        | `cant_kick` | Authenticated user can't kick User from this subject. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              user_sid:
                description: The user unique identifier.
                type: string
      responses:
        '200':
          description: subject member deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/join:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string
    post:
      tags:
        - 2. subjects
      summary: Join a subject
      description: |
        User join a subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `already_in_subject` | ser is already member of the subject. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              persona_sid:
                description: The persona unique identifier.
                type: string
      responses:
        '200':
          description: Subject join successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/leave:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string
    delete:
      tags:
        - 2. subjects
      summary: Leave a subject
      description: |
        User leave a subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_in_subject` | User is not in the subject. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              persona_sid:
                description: The persona unique identifier.
                type: string
      responses:
        '200':
          description: Subject leave successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/subjects/{sid}/link:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this subject.
        required: true
        type: string

    get:
      tags:
        - 2. subjects
      summary: Get linked subjects for a subject
      description: |
        Get a list of linked subject for a subject. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Subject list retrieval successful
          schema:
            $ref: '#/definitions/Subject-SubjectLinks'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    post:
      tags:
        - 2. subjects
      summary: Link a subject
      description: |
        Link two subjects together.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `already_linked` | Subjects are already linked together. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_link_subject` | Authenticated user does not have permission to link this subject. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: subject
          in: body
          description: The subject to link to.
          schema:
            $ref: '#/definitions/Subject-SubjectLinkObject'
      responses:
        '200':
          description: Subject link successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 2. subjects
      summary: Unlink a subject
      description: |
        Unlink two subjects.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_linked` | Subjects are not linked together. | 403 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_unlink_subject` | Authenticated user does not have permission to unlink this subject. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: subject
          in: body
          description: The subject to unlink from.
          schema:
            $ref: '#/definitions/Subject-SubjectLinkObject'
      responses:
        '200':
          description: Subject unlink successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /subject/subjects/{sid}/users:
    parameters:
      - name: sid
        in: path
        description: The subject ID to get the users for.
        required: true
        type: string
    get:
      tags:
        - 2. users
      summary: Get users for a subject
      description: |
        Get a list of users in a subject. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: User list retrieval successful
          schema:
            $ref: '#/definitions/Subject-Users'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/users/{sid}/subjects:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this user.
        required: true
        type: string
    get:
      tags:
        - 2. users
      summary: Get subjects for user
      description: |
        Get all the subjects for a user.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Subject list retrieval successful
          schema:
            $ref: '#/definitions/Subject-Subjects'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /subject/subjects/{sid}/conversations:
    parameters:
      - name: sid
        in: path
        description: The subject ID to get the conversations for.
        required: true
        type: string
    get:
      tags:
        - 2. conversations
      summary: Get conversations for a subject
      description: |
        Get a list of conversations in a subject. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Conversation list retrieval successful
          schema:
            $ref: '#/definitions/Subject-Conversations'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /subject/conversations/{sid}/link:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this conversation.
        required: true
        type: string
    post:
      tags:
        - 2. conversations
      summary: Link subject to conversation
      description: |
        Link a subject to a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `already_linked` | Subject is already linked to this conversation. | 403 |
        | `cant_link_subject` | Authenticated user does not have permission to link this subject. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: subject
          in: body
          description: The subject to link to.
          schema:
            $ref: '#/definitions/Subject-SubjectLinkObject'
      responses:
        '200':
          description: Subject link successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 2. conversations
      summary: Unlink subject from conversation
      description: |
        Unlink a subject from a conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `already_linked` | Subject is already linked to this conversation. | 403 |
        | `cant_unlink_subject` | Authenticated user does not have permission to unlink this subject. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: subject
          in: body
          description: The subject to unlink from.
          schema:
            $ref: '#/definitions/Subject-SubjectLinkObject'
      responses:
        '200':
          description: Subject unlink successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /inbox/events:

    get:
      tags:
        - 1. events
      summary: Get events for a user
      description: |
        Get a list of events in a user inbox. Use the query parameters to modify the behaviour of this endpoint.

        #### Common Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this event. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `date_updated` | The datetime (ISO 8601) that this resource was updated. |
        | `ts` | The timestamp that this resource was last changed. |
        | `user_sid` | The user ID associated with this event. |
        | `notification` or `message` | Associated resource. |

        #### Event associated resource

        An event associated resource can be a `notification` or `message`.

        #### Notification Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this notification. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `ts` | The timestamp that this resource was last changed. |
        | `title` | The title of the notification. |
        | `subject` or `conversation` | The content object of the notification. |
        | `action` | Specifies the action to be displayed for the notification. Valid values are. `null` or `invite` |
        | `action_result` | Store the action result. `null`, `accepted` or `declined` |

        ##### Subject response sample

        ```json
        {
          "sid": "234734213.56765867",
          "date_created": "2017-06-14T17:04:36Z",
          "date_updated": "2017-06-14T17:04:36Z",
          "ts": 1360782804,
          "user_sid": "U228389023",
          "notification": {
            "sid": "238077.0785345",
            "date_created": "2017-06-14T17:04:36Z",
            "ts": 1360782804,
            "title": "You are invited to join a subject by Bobby",
            "subject": {
              "sid": "S44546566",
              "ts": 1360782804,
              "name": "KPI",
              "description": "Performance measure...",
              "participant_count": 0,
              "conversation_count": 0
            },
            "action": "invite",
            "action_result": null
          }
        }
        ```

        ##### Conversation response sample

        ```json
        {
          "sid": "234734213.56765867",
          "date_created": "2017-06-14T17:04:36Z",
          "date_updated": "2017-06-14T17:04:36Z",
          "ts": 1360782804,
          "user_sid": "U228389023",
          "notification": {
            "sid": "238077.0785345",
            "date_created": "2017-06-14T17:04:36Z",
            "ts": 1360782804,
            "title": "You are invited to join a conversation by John",
            "conversation": {
              "sid": "C9375920278",
              "ts": 1360782804,
              "title": "Evaluate IR Camera 32B",
              "participant_count": 0,
              "subject_count": 0
            },
            "action": "invite",
            "action_result": null
          }
        }
        ```

        #### Message Properties

        | Name | Description |
        | - | - |
        | `sid` | A character string that uniquely identifies this message. |
        | `date_created` | The datetime (ISO 8601) that this resource was created. |
        | `ts` | The timestamp that this resource was last changed. |
        | `body` | The content of the message. |
        | `type` | The type of the message. |
        | `from` | Identity of the messageâ€™s author. |
        | `to` | The conversation resource. |
        | `participant_count` | Number of participants of this convrsation. |
        | `subject_count` | Number of subjects of this convrsation. |

        ##### Response sample

        ```json
        {
          "sid": "234734213.56765867",
          "date_created": "2017-06-14T17:04:36Z",
          "date_updated": "2017-06-14T17:04:36Z",
          "ts": 1360782804,
          "user_sid": "U228389023",
          "message": {
            "sid": "238077.0785345",
            "date_created": "2017-06-14T17:04:36Z",
            "ts": 1360782804,
            "body": "Why is the jump to production so difficult?",
            "from": {
              "sid": "U228389023",
              "ts": 1360782804,
              "first_name": "Bob",
              "last_name": "Sinclair",
              "avatar": "http://api-docs.rea.ch/static/rea.ch-logo-black.png",
              "persona": {
                "sid": "P928472829",
                "ts": 1360782804,
                "name": "work"
              }
            },
            "to": {
              "sid": "C9375920278",
              "ts": 1360782804,
              "title": "Evaluate IR Camera 32B"
            },
            "participant_count": 0,
            "subject_count": 0
          }
        }
        ```

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_latest` | Value passed for `latest` was invalid | 400 |
        | `invalid_oldest` | Value passed for `oldest` was invalid | 400 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
      parameters:
        - $ref: "#/parameters/inclusive"
        - $ref: "#/parameters/latest"
        - $ref: "#/parameters/oldest"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Event list retrieval successful
          schema:
            $ref: '#/definitions/Inbox-Events'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /notify/bindings:
    get:
      tags:
        - 4. bindings
      summary: Get user bindings
      description: |
        Get a list of bindings for a user. Use the query parameters to modify the behaviour of this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Binding list retrieval successful
          schema:
            $ref: '#/definitions/Notify-Bindings'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    post:
      tags:
        - 4. bindings
      summary: Create a binding
      description: |
        Creating a Binding with the same `address` as that of an existing Binding will replace
        the existing Binding with the new one. In order to avoid such leaking when creating
        a new Binding, we remove any previous Binding with the same `address`.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `invalid_binding_type` | Invalid binding type. | 400 |

      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref:  '#/definitions/Notify-BindingObject'

      responses:
        '201':
          description: Binding creation successful
          schema:
            $ref: '#/definitions/Notify-Binding'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /notify/bindings/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this binding.
        required: true
        type: string

    get:
      tags:
        - 4. bindings
      summary: Retrieve a binding
      description: |
        Get a single binding.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `binding_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      responses:
        '200':
          description: Binding retrieval successful
          schema:
            $ref: '#/definitions/Notify-Binding'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 4. bindings
      summary: Delete a binding
      description: |
        Delete a binding.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `binding_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_delete_binding` | Authenticated user does not have permission to delete this binding. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      responses:
        '200':
          description: Binding deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /auth/login:
    post:
      tags:
        - 5. authentication
      summary: Authenticate a user
      description: |
        Allows user to pass in credentials in order to receive an authentication token.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `access_denied` | Value passed for `email` or `password` was invalid. | 401 |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | User not found for this `email`. | 404 |

      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: The user email address.
              password:
                type: string
                description: The user password.

      responses:
        '200':
          description: Authentication successful
          schema:
            $ref: '#/definitions/Auth-JWTToken'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          description: Access denied
          schema:
            $ref: '#/definitions/AppError'
        '404':
          $ref: '#/responses/NotFound'

  /auth/token:
    post:
      tags:
        - 5. authentication
      summary: Refresh an access token
      description: |
        Use this endpoint to refresh an access token, using the refresh token you got during authorization.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `invalid_refresh_token` | Invalid refresh token. | 401 |

      security: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string
                description: The refresh token to use.

      responses:
        '200':
          description: Token refresh successful
          schema:
            $ref: '#/definitions/Auth-JWTToken'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
  /iam/user/{sid}/role:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies the user.
        required: true
        type: string

    get:
      tags:
        - 6. users
      summary: Retrieve resource user role
      description: |
        Retrieve a user role for a specific resource object

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `user_not_found` | Value passed for `sid` was invalid. |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      parameters:
        - name: body
          in: body
          description: The resource to check.
          schema:
            $ref: '#/definitions/IAM-ResourceObject'

      responses:
        '200':
          description: Role retrieval successful
          schema:
            $ref: '#/definitions/IAM-User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    post:
      tags:
        - 6. users
      summary: Add resource user role
      description: |
        Add a user access to a specific resource object.

        Creating an access to the same resource as that of an existing one will replace the existing access with the new one.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_add_role` | Authenticated user does not have permission to add this role to this resource. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/IAM-UserObject'

      responses:
        '201':
          description: Role creation successful
          schema:
            $ref: '#/definitions/IAM-User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 6. users
      summary: Remove resource user role
      description: |
        Remove a user access to a specific resource object

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `user_not_found` | Value passed for `sid` was invalid. |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_remove_role` | Authenticated user does not have permission to remove this role to this resource. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/IAM-ResourceObject'

      responses:
        '200':
          description: Role deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /iam/users/{sid}/users:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies the user.
        required: true
        type: string

    get:
      tags:
        - 6. users
      summary: Retrieve users access
      description: |
        Retrieve all users that have access to the user.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `user_not_found` | Value passed for `sid` was invalid. |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |

      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Users list retrieval successful
          schema:
            $ref: '#/definitions/IAM-Users'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /iam/conversations/{sid}/users:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies the conversation.
        required: true
        type: string

    get:
      tags:
        - 6. conversations
      summary: Retrieve users access
      description: |
        Retrieve all users that have access to the conversation.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `conversation_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Users list retrieval successful
          schema:
            $ref: '#/definitions/IAM-Users'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /iam/subjects/{sid}/users:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies the subject.
        required: true
        type: string

    get:
      tags:
        - 6. subjects
      summary: Retrieve users access
      description: |
        Retrieve all users that have access to the subject.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `subject_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
        | `invalid_page` | Value passed for `page` was invalid | 400 |
        | `invalid_page_size` | Value passed for `page_size` was invalid | 400 |

      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/page_size"
      responses:
        '200':
          description: Users list retrieval successful
          schema:
            $ref: '#/definitions/IAM-Users'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
  /account/users:
    post:
      tags:
        - 7. users
      summary: Create a user
      description: |
        Create a new user on the system.

        #### Token

        An app token is required to interact with this endpoint.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |

      parameters:
        - name: user
          in: body
          description: The user to create.
          required: true
          schema:
            allOf:
            - $ref:  '#/definitions/Account-UserBaseObject'
            - type: object
              required:
                - password
              properties:
                password:
                  description: The user password.
                  type: string
      responses:
        '201':
          description: User creation successful
          schema:
            $ref: '#/definitions/Account-UserCreate'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /account/users/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this user.
        required: true
        type: string
    get:
      tags:
        - 7. users
      summary: Get a user
      description: |
        Get a single user.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: User retrieval successful
          schema:
            $ref: '#/definitions/Account-User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - 7. users
      summary: Update a user
      description: |
        Update a user.

        Note that when an email is changed, the `email_verified` field is automatically set to `false`. The
        user need to pass the verification email process.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_user` | Authenticated user does not have permission to update this user. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: user
          in: body
          description: The user to update.
          schema:
            type: object
            properties:
              first_name:
                description: The user first name.
                type: string
              last_name:
                description: The user last name.
                type: string
              email:
                description: The user email address.
                type: string
              attributes:
                description: |
                  An optional string metadata field that can be use to store any data you wish.
                  The string value must contain structurally valid JSON if specified.
                  Note that this will always be null for resources returned via LIST GET operations,
                  but will be present for single GET.
                type: string
      responses:
        '200':
          description: User update successful
          schema:
            $ref: '#/definitions/Account-User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 7. users
      summary: Deactivate user account
      description: |
        Deactivates the user by archiving its user object.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_archive_user` | Authenticated user does not have permission to archive this user. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: User archive successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /account/users/{sid}/image:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this user.
        required: true
        type: string
    post:
      tags:
        - 7. users
      summary: Set user avatar image
      description: |
        Set a user's avatar image based on user sid string parameter.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_user` | Authenticated user does not have permission to update this user. | 403 |
        | `bad_image` | The uploaded image could not be processed - try passing a JPEG, GIF or PNG. | 400 |
        | `too_large` | The uploaded image had excessive dimensions. | 400 |
        | `invalid_form_data` | The method was called via a `POST` request with `Content-Type` `application/x-www-form-urlencoded` or `multipart/form-data`, but the form data was either missing or syntactically invalid. | 400 |
        | `invalid_post_type` | The method was called via a `POST` request, but the specified `Content-Type` was invalid. Valid types are: `application/x-www-form-urlencoded` or `multipart/form-data`. | 400 |
        | `missing_post_type` | The method was called via a `POST` request and included a data payload, but the request did not include a `Content-Type` header. | 400 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      consumes: ["multipart/form-data"]
      parameters:
        - name: image
          in: formData
          description: The image to be uploaded. File contents via `multipart/form-data`.
          required: true
          type: file
      responses:
        '200':
          description: User update successful
          schema:
            $ref: '#/definitions/Account-UserImage'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 7. users
      summary: Delete user avatar image
      description: |
        Delete a user's avatar image based on user sid string parameter. It will clear whatever image is currently set.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `user_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_user` | Authenticated user does not have permission to update this user. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: User image deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

  /account/users/email/verify/send:
    post:
      tags:
        - 7. users
      summary: Send verification email
      description: |
        Send an email with a verification link to a user that has an email matching the one in the request body.
        This endpoint will return success even if the email does not match any users on the system.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                description: The user email address.
                type: string
      responses:
        '200':
          description: Email send successful if email exists
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /account/users/email/verify:
    post:
      tags:
        - 7. users
      summary: Verify user email
      description: |
        Verify the user email address.

        #### Permissions

        No permissions required.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: The token given to validate the email
                type: string
      responses:
        '200':
          description: User email verification successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
  /account/personas:
    post:
      tags:
        - 7. personas
      summary: Create a persona
      description: |
        Create a persona for a particular user.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |

      parameters:
        - name: body
          in: body
          description: The persona to create.
          schema:
            $ref:  '#/definitions/Account-PersonaObject'
      responses:
        '201':
          description: Persona creation successful
          schema:
            $ref: '#/definitions/Account-Persona'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'

  /account/personas/{sid}:
    parameters:
      - name: sid
        in: path
        description: A character string that uniquely identifies this persona.
        required: true
        type: string
    get:
      tags:
        - 7. personas
      summary: Get a user persona
      description: |
        Get a single user persona.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `persona_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Persona retrieval successful
          schema:
            $ref: '#/definitions/Account-Persona'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    put:
      tags:
        - 7. personas
      summary: Update a persona
      description: |
        Update a persona.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `persona_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_update_persona` | Authenticated user does not have permission to update this persona. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      parameters:
        - name: body
          in: body
          description: The persona to update.
          schema:
            $ref:  '#/definitions/Account-PersonaObject'
      responses:
        '200':
          description: Persona update successful
          schema:
            $ref: '#/definitions/Account-Persona'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - 7. personas
      summary: Delete user persona
      description: |
        Delete a user persona.

        #### Errors

        This table lists the expected errors that this method could return. However, other
        errors can be returned in the case where the service is down or other unexpected
        factors affect processing. Callers should always check the value of the `ok` params in the response.

        | Error | Description | Status Code |
        | - | - | - |
        | `missing_params` | Invalid or missing parameters in URL or request body. | 400 |
        | `persona_not_found` | Value passed for `sid` was invalid. | 404 |
        | `not_authed` | No authentication token provided. | 401 |
        | `invalid_auth` | Invalid authentication token. | 401 |
        | `cant_delete_persona` | Authenticated user does not have permission to delete this persona. | 403 |
        | `no_access` | Authenticated user do not have access to this resource. | 403 |
      responses:
        '200':
          description: Persona deletion successful
          schema:
            $ref: '#/definitions/AppOk'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
definitions:
  Meta:
    type: object
    properties:
      page:
        description: Starting page for pagination.
        type: integer
      page_size:
        description: Number of object to display for pagination.
        type: integer
      first_page_url:
        type: string
      previous_page_url:
        type: string
      url:
        type: string
      next_page_url:
        type: string
      key:
        description: the key attribute of the object where the resource content can be found.
        type: string

  AppOk:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true

  AppError:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: false
      error:
        description: a short machine-readable error code.
        type: string
  Chat-Messages:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      messages:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Chat-MessageObject'
      meta:
        $ref: '#/definitions/Meta'

  Chat-Message:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      message:
        type: object
        $ref: '#/definitions/Chat-MessageObject'

  Chat-MessageObject:
    type: object
    required:
      - body
      - from
      - to
    properties:
      sid:
        description: A character string that uniquely identifies this message.
        type: string
        readOnly: true
      date_created:
        description: The datetime (ISO 8601) that this resource was created.
        type: string
        format: date-time
        readOnly: true
      date_updated:
        description: The datetime (ISO 8601) that this resource was updated.
        type: string
        format: date-time
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      from:
        description: |
          Identity of the messageâ€™s author. If the message was created by a system,
          the value will be `system`.
        type: string
      to:
        description: The unique id of the conversation this message is sent to.
        type: string
      type:
        description: The type of the message.
        type: string
        default: message
      subtype:
        description: The subtype of the message.
        type: string
        enum:
          - conversation_join
          - conversation_leave
          - conversation_title
          - conversation_objective
          - subject_conversation_link
          - subject_conversation_unlink
      unfurl_links:
        description: Pass `true` to enable unfurling of text-based content.
        type: boolean
        default: false
      unfurl_media:
        description: Pass `false` to disable unfurling of media content.
        type: boolean
        default: true
      was_edited:
        description: |
          `true` if the message has been updated since it was created.
          `false` if it has not changed.
        type: boolean
        default: false
        readOnly: true
      attributes:
        description: |
          An optional string metadata field that can be use to store any data you wish.
          The string value must contain structurally valid JSON if specified.
          Note that this will always be null for resources returned via LIST GET operations,
          but will be present for single GET.
        type: string
      body:
        description: The content of the message.
        type: string
      thread_sid:
        description: Provide another message's sid value to make this message a reply.
        type: string

  Chat-Conversations:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      conversations:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Chat-ConversationObject'
      meta:
        $ref: '#/definitions/Meta'

  Chat-Conversation:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      conversation:
        type: object
        $ref: '#/definitions/Chat-ConversationObject'

  Chat-ConversationObject:
    type: object
    required:
      - title
    properties:
      sid:
        description: A character string that uniquely identifies this conversation.
        type: string
        readOnly: true
      date_created:
        description: The datetime (ISO 8601) that this resource was created.
        type: string
        format: date-time
        readOnly: true
      date_updated:
        description: The datetime (ISO 8601) that this resource was updated.
        type: string
        format: date-time
        readOnly: true
      date_archived:
        description: The datetime (ISO 8601) that this resource was archived.
        type: string
        format: date-time
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      created_by:
        description: |
          Identity of the conversation's creator (User SID). If the conversation was created by a
          system, the value will be `system`.
        type: string
        readOnly: true
      attributes:
        description: |
          An optional string metadata field that can be use to store any data you wish.
          The string value must contain structurally valid JSON if specified.
          Note that this will always be null for resources returned via LIST GET operations,
          but will be present for single GET.
        type: string
      title:
        description: The conversation title.
        type: string
      objective:
        description: The conversation objective.
        type: string
      private:
        description: Conversation is private?
        type: boolean
        default: true
      participate:
        description: User participate in conversation (with a persona)?
        type: boolean
        default: true
        readOnly: true
      latest:
        description: The latest message sid in the conversation.
        type: string
        readOnly: true
      last_read:
        description: the message sid for the last message the calling user has read in this conversation.
        type: string
        readOnly: true
      participant_count:
        description: Number of participants of this conversation.
        type: integer
        readOnly: true
      subject_count:
        description: Number of subjects for this conversation.
        type: integer
        readOnly: true

  Chat-Users:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      users:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Chat-UserObject'
      meta:
        $ref: '#/definitions/Meta'

  Chat-User:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      user:
        type: object
        $ref: '#/definitions/Chat-UserObject'

  Chat-UserObject:
    allOf:
    - $ref:  '#/definitions/Chat-UserBaseObject'
    - type: object
      properties:
        persona:
          type: object
          $ref: '#/definitions/Chat-PersonaObject'

  Chat-UserBaseObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this user.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      first_name:
        description: The user first name.
        type: string
        readOnly: true
      last_name:
        description: The user last name.
        type: string
        readOnly: true
      avatar:
        description: URL to the user avatar picture.
        type: string
        readOnly: true

  Chat-PersonaObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this persona.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The name of the persona.
        type: string

  Chat-Subjects:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      subjects:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Chat-SubjectObject'
      meta:
        $ref: '#/definitions/Meta'

  Chat-SubjectObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this subject.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The subject name.
        type: string
        readOnly: true
      participant_count:
        description: Number of participants of this subject.
        type: integer
        readOnly: true
      conversation_count:
        description: Number of conversations for this subject.
        type: integer
        readOnly: true
  Subject-Events:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      events:
        type: array
        uniqueItems: true
        items:
          type: object
      meta:
        $ref: '#/definitions/Meta'

  Subject-Subjects:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      subjects:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Subject-SubjectObject'
      meta:
        $ref: '#/definitions/Meta'

  Subject-Subject:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      subject:
        type: object
        $ref: '#/definitions/Subject-SubjectObject'

  Subject-SubjectBaseObject:
    type: object
    required:
      - name
    properties:
      sid:
        description: A character string that uniquely identifies this subject.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The subject name.
        type: string
      description:
        description: The subject description.
        type: string

  Subject-SubjectObject:
    allOf:
    - $ref:  '#/definitions/Subject-SubjectBaseObject'
    - type: object
      properties:
        date_created:
          description: The datetime (ISO 8601) that this resource was created.
          type: string
          format: date-time
          readOnly: true
        date_updated:
          description: The datetime (ISO 8601) that this resource was updated.
          type: string
          format: date-time
          readOnly: true
        created_by:
          description: |
            Identity of the subject's creator. If the subject was created by a
            system, the value will be `system`.
          type: string
          readOnly: true
        attributes:
          description: |
            An optional string metadata field that can be use to store any data you wish.
            The string value must contain structurally valid JSON if specified.
            Note that this will always be null for resources returned via LIST GET operations,
            but will be present for single GET.
          type: string
        participate:
          description: List of persona sids of the user that participate to this subject.
          type: array
          items:
            type: string
          readOnly: true
        participant_count:
          description: Number of participants of this subject.
          type: integer
          readOnly: true
        conversation_count:
          description: Number of conversations for this subject.
          type: integer
          readOnly: true

  Subject-SubjectLinks:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      subjects:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Subject-SubjectListingObject'
      meta:
        $ref: '#/definitions/Meta'

  Subject-SubjectListingObject:
    allOf:
    - $ref:  '#/definitions/Subject-SubjectBaseObject'
    - type: object
      properties:
        participant_count:
          description: Number of participants of this subject.
          type: integer
          readOnly: true
        conversation_count:
          description: Number of conversations for this subject.
          type: integer
          readOnly: true

  Subject-SubjectLinkObject:
    type: object
    properties:
      sid:
        description: The unique identifier of the subject to link.
        type: string

  Subject-Users:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      users:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Subject-UserObject'
      meta:
        $ref: '#/definitions/Meta'

  Subject-UserObject:
    allOf:
    - $ref:  '#/definitions/Subject-UserBaseObject'
    - type: object
      properties:
        personas:
          type: array
          uniqueItems: true
          items:
            $ref: '#/definitions/Subject-PersonaObject'

  Subject-UserBaseObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this user.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      first_name:
        description: The user first name.
        type: string
        readOnly: true
      last_name:
        description: The user last name.
        type: string
        readOnly: true
      avatar:
        description: URL to the user avatar picture.
        type: string
        readOnly: true

  Subject-PersonaObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this persona.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The name of the persona.
        type: string

  Subject-Conversations:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      conversations:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Subject-ConversationObject'
      meta:
        $ref: '#/definitions/Meta'

  Subject-ConversationObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this conversation.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      title:
        description: The conversation title.
        type: string
        readOnly: true
      participant_count:
        description: Number of participants of this conversation.
        type: integer
        readOnly: true
      subject_count:
        description: Number of subjects for this conversation.
        type: integer
        readOnly: true

  Subject-SubjectCover:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      subject:
        type: object
        $ref: '#/definitions/Subject-SubjectCoverObject'

  Subject-SubjectCoverObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this subject.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The subject name.
        type: string
        readOnly: true
      description:
        description: The subject description.
        type: string
        readOnly: true
      participant_count:
        description: Number of participants of this subject.
        type: integer
        readOnly: true
      conversation_count:
        description: Number of conversations for this subject.
        type: integer
        readOnly: true
      link_count:
        description: Number of linked subjects for this subject.
        type: integer
        readOnly: true
      tag:
        description: The subject tag name.
        type: string
        readOnly: true
      picture:
        description: URL to the subject cover picture.
        type: string
        readOnly: true
      theme:
        description: Color theme of the cover page.
        type: string
        readOnly: true
        default: light
        enum:
          - light
          - dark
      conversations:
        description: List of conversations highlighted in the cover page.
        type: array
        items:
          type: object
          properties:
            sid:
              description: A character string that uniquely identifies this conversation.
              type: string
            ts:
              description: The timestamp that this resource was last changed.
              type: integer
              readOnly: true
            title:
              description: The conversation title.
              type: string
        readOnly: true
  Inbox-Events:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      events:
        type: array
        uniqueItems: true
        items:
          type: object
      meta:
        $ref: '#/definitions/Meta'
  Notify-Bindings:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      bindings:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Notify-BindingObject'
      meta:
        $ref: '#/definitions/Meta'

  Notify-Binding:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      binding:
        type: object
        $ref: '#/definitions/Notify-BindingObject'

  Notify-BindingObject:
    type: object
    properties:
      sid:
        description: A character string that uniquely identifies this binding.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      date_created:
        description: The datetime (ISO 8601) that this resource was created.
        type: string
        format: date-time
        readOnly: true
      date_updated:
        description: The datetime (ISO 8601) that this resource was updated.
        type: string
        format: date-time
        readOnly: true
      user_sid:
        description: A character string that uniquely identifies the user.
        type: string
        readOnly: true
      type:
        description: The type of the binding. This determines the transport technology to use.
        type: string
        default: apn
        enum:
          - apn
      address:
        description: |
          The address specific to the channel. For APNS it is the device token.
        type: string
  Auth-JWTToken:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      tokens:
        type: object
        $ref: '#/definitions/Auth-JWTTokenObject'

  Auth-JWTTokenObject:
    type: object
    properties:
      token:
        type: string
        description: |
          JWT Access token - used to authenticate against protected API resources.
          It must be set in Authorization header.
      refresh_token:
        type: string
        description: |
          JWT Refresh token - used to acquire new Access Token. Token refresh is
          handled by the following API endpoint `/auth/token`.
  IAM-Users:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      users:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/IAM-RoleObject'
      resource:
        type: object
        $ref: '#/definitions/IAM-ResourceObject'
      meta:
        $ref: '#/definitions/Meta'

  IAM-User:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      user:
        type: object
        $ref: '#/definitions/IAM-RoleObject'
      resource:
        type: object
        $ref: '#/definitions/IAM-ResourceObject'

  IAM-UserObject:
    type: object
    properties:
      role:
        description: The role for this resource.
        type: string
        default: member
        enum:
          - org_owner
          - org_admin
          - org_member
          - admin
          - member
          - guest
      resource:
        type: object
        $ref: '#/definitions/IAM-ResourceObject'

  IAM-RoleObject:
    type: object
    properties:
      sid:
        description: The resource unique identifier.
        type: string
        readOnly: true
      role:
        description: The role for this resource.
        type: string
        default: member
        enum:
          - org_owner
          - org_admin
          - org_member
          - admin
          - member
          - guest

  IAM-ResourceObject:
    type: object
    properties:
      sid:
        description: The unique identifier of the resource.
        type: string
      type:
        description: The user role for this resource.
        type: string
        enum:
          - conversation
          - subject
          - user
  Account-User:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      user:
        type: object
        $ref: '#/definitions/Account-UserObject'

  Account-UserCreate:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      user:
        type: object
        $ref: '#/definitions/Account-UserObject'
      tokens:
        type: object
        $ref: '#/definitions/Auth-JWTTokenObject'

  Account-UserObject:
    allOf:
    - $ref:  '#/definitions/Account-UserBaseObject'
    - type: object
      properties:
        personas:
          description: List of personas this user owns.
          type: array
          uniqueItems: true
          items:
            $ref: '#/definitions/Account-PersonaObject'
          readOnly: true

  Account-UserBaseObject:
    type: object
    required:
      - first_name
      - last_name
      - email
    properties:
      sid:
        description: A character string that uniquely identifies this user.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      username:
        description: The username of a user.
        type: string
        readOnly: true
      first_name:
        description: The user first name.
        type: string
      last_name:
        description: The user last name.
        type: string
      email:
        description: The user email address.
        type: string
      email_verified:
        description: Denote if user's email has been verified.
        type: boolean
        readOnly: true
        default: false
      avatar:
        description: URL to the user avatar picture.
        type: string
        readOnly: true
      attributes:
        description: |
          An optional string metadata field that can be use to store any data you wish.
          The string value must contain structurally valid JSON if specified.
          Note that this will always be null for resources returned via LIST GET operations,
          but will be present for single GET.
        type: string
      date_created:
        description: The datetime (ISO 8601) that this resource was created.
        type: string
        format: date-time
        readOnly: true
      date_updated:
        description: The datetime (ISO 8601) that this resource was updated.
        type: string
        format: date-time
        readOnly: true
      date_deactivated:
        description: The datetime (ISO 8601) that this resource was deactivated.
        type: string
        format: date-time
        readOnly: true

  Account-UserImage:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      image:
        description: URL to the user avatar picture.
        type: string
        readOnly: true

  Account-Persona:
    type: object
    properties:
      ok:
        description: Indicating success or failure.
        type: boolean
        default: true
      persona:
        type: object
        $ref: '#/definitions/Account-PersonaObject'

  Account-PersonaObject:
    type: object
    required:
      - name
    properties:
      sid:
        description: A character string that uniquely identifies this persona.
        type: string
        readOnly: true
      ts:
        description: The timestamp that this resource was last changed.
        type: integer
        readOnly: true
      name:
        description: The name of the persona.
        type: string
